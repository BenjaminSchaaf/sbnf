<!DOCTYPE html>
<html lang="en">
  <head>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type"/>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="The Live Playground for SBNF">
    {# Prefetch the worker script as well as the wasm so they're in the cache #}
    <link rel="modulepreload" href="./sbnf.js" crossorigin="anonymous" />
    <link rel="preload" href="./sbnf.wasm" as="fetch" crossorigin="anonymous" />
    <script>
      // Create the worker as early as possible to speed up load time
      let worker = new Worker('./sbnf.js');

      document.addEventListener("DOMContentLoaded", () => {
        const name_input = document.getElementById('input-name');
        const arguments_input = document.getElementById('input-arguments');
        const quiet_input = document.getElementById('input-quiet');
        const debug_input = document.getElementById('input-debug');
        const code_input = document.getElementById('input-code');

        const syntax_elem = document.getElementById('syntax');
        const syntax_tab_elem = document.getElementById('syntax-tab');
        const syntax_content_elem = document.getElementById('syntax-content');

        const messages_elem = document.getElementById('messages');
        const messages_tab_elem = document.getElementById('messages-tab');
        const messages_content_elem = document.getElementById('messages-content');

        // Implement tabs
        function activate_syntax_tab() {
          syntax_elem.classList.remove('hide');
          syntax_tab_elem.classList.add('active');

          messages_elem.classList.add('hide');
          messages_tab_elem.classList.remove('active');
        }
        syntax_tab_elem.addEventListener('click', activate_syntax_tab);

        function activate_messages_tab() {
          syntax_elem.classList.add('hide');
          syntax_tab_elem.classList.remove('active');

          messages_elem.classList.remove('hide');
          messages_tab_elem.classList.add('active');
        }
        messages_tab_elem.addEventListener('click', activate_messages_tab);

        // Run compilation in a background thread to avoid blocking the UI
        // thread. We only ever have one pending compilation if one is
        // currently in progress. This ensures we always end up with the most
        // up-to-date compile.
        let compile_in_flight = false;
        let pending_compile = null;

        function set_content(syntax, messages) {
          syntax_content_elem.textContent = syntax;
          messages_content_elem.textContent = messages;

          if (syntax === "") {
            activate_messages_tab();
          } else {
            activate_syntax_tab();
          }
        }

        function create_worker() {
          if (!worker) {
            worker = new Worker('./sbnf.js');
          }

          worker.onmessage = (event) => {
            console.assert(compile_in_flight);

            const [syntax, messages] = event.data;
            set_content(syntax, messages);

            if (pending_compile) {
              worker.postMessage(pending_compile);
              pending_compile = null;
            } else {
              compile_in_flight = false;
            }
          };

          worker.onerror = (error) => {
            console.error(error);

            worker.terminate();

            worker = null;
            pending_compile = null;

            set_content('', 'Whoops, it looks like the compiler has crashed.\n'
                          + 'This is a bug and should be reported.\n');
          };

          compile_in_flight = false;
          pending_compile = null;
        }

        // Complete worker initialization
        create_worker();

        async function do_compile() {
          const name = name_input.value;
          const code = code_input.value;
          const args = arguments_input.value;
          const quiet = quiet_input.checked;
          const debug = debug_input.checked;
          const message = [name, code, args, quiet, debug];

          if (!worker) {
            create_worker();
          }

          if (compile_in_flight) {
            pending_compile = message;
          } else {
            compile_in_flight = true;
            worker.postMessage(message);
          }
        }

        do_compile();

        quiet_input.addEventListener('change', do_compile);
        debug_input.addEventListener('change', do_compile);
        name_input.addEventListener('input', do_compile);
        arguments_input.addEventListener('input', do_compile);
        code_input.addEventListener('input', do_compile);
      });
    </script>
    <style type="text/css">
      body {
        font-family: sans-serif;
        padding: 10px 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      header {
        display: flex;
        flex-direction: row;
        align-items: baseline;
      }

      header h3 {
        flex-grow: 1;
        margin: 0;
      }

      header a {
        color: #f0f6fc;
        background-color: #161b22;
        font-weight: bold;
        text-decoration: none;
        padding: .2rem .4rem;
        border-radius: 0.3rem;
      }

      header a:hover {
        color: #ffffffb2;
      }

      form {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      form div {
        display: flex;
        flex-direction: row;
        gap: 10px;
        flex-wrap: wrap;
      }

      textarea {
        flex-grow: 1;
        font-family: monospace;
      }

      input[type=text], textarea {
        appearance: none;
        background: #fff;
        border: 0.05rem solid #bcc3ce;
        border-radius: 0.2rem;
        color: black;
        display: block;
        outline: 0;
        padding: 0.3rem 0.4rem;
        transition: background .2s,border .2s,box-shadow .2s,color .2s;
      }

      input[type=text]:focus, textarea:focus {
        border-color: #5755d9;
        box-shadow: 0 0 0 .1rem rgba(87,85,217,.2);
      }

      form label {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
        padding: 0.3rem 0.1rem;
      }

      form label input {
        aling-self: flex-start;
      }

      section {
        display: flex;
        flex-direction: column;
      }

      .hide {
        display: none;
      }

      .tabs {
        display: flex;
        flex-direction: row;
      }

      .tabs > a {
        flex-grow: 1;
        text-align: center;
        text-decoration: none;
        padding: 0.4em;
        border-radius: .3rem .3rem 0 0;
        border-bottom: .1rem solid transparent;
        color: black;
      }

      .tabs > a:hover {
        background-color: #f5f5f5;
        transition: background-color 200ms linear;
        color: #5755d9;
        transition: background-color 200ms linear;
      }

      .tabs > a.active {
        color: #5755d9;
        background: #eee;
        border-bottom-color: #5755d9;
      }

      code {
        background-color: #eee;
        padding: .1rem .2rem;
        border-radius: .1rem;
      }

      pre {
        margin-top: 0;
        padding: 1em;
        background: #eee;
        min-height: 50%;
        overflow: scroll;
      }
    </style>
    <title>SBNF Playground</title>
  </head>
  <body>
    <header>
      <h3>SBNF Playground</h3>
      <a href="https://github.com/BenjaminSchaaf/sbnf" class="btn btn-primary btn-large">GitHub</a>
    </header>

    <form>
      <div>
        <div>
          <input id="input-name" type="text" placeholder="name">
          <input id="input-arguments" type="text" placeholder="args">
        </div>
        <div>
          <label>
            <input type="checkbox" id="input-quiet">
            Quiet <code>-q</code>
          </label>
          <label>
            <input type="checkbox" id="input-debug" checked>
            Debug <code>-g</code>
          </label>
        </div>
      </div>
      <div>
        <textarea id="input-code" placeholder="Textarea" rows="15" style="font-family: monospace; resize: vertical;">
main : ( ~( foo
          | bar
       )  )*
     ;

foo : 'foo'{foo} ;

bar : 'bar'{bar} ;
</textarea>
      </div>
    </form>

    <section>
      <div class="tabs">
        <a href="#" class="active" id="syntax-tab">Sublime Syntax</a>
        <a href="#" id="messages-tab">Errors & Warnings</a>
      </div>

      <pre id="syntax"><code id="syntax-content"></code></pre>
      <pre class="hide" id="messages"><code id="messages-content"></code></pre>
    </section>
  </body>
</html>
