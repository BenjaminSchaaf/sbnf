EXTENSIONS = 'sbnf'

prototype : ( ~comment )* ;

comment{comment.line.number-sign} : '#+'{punctuation.definition.comment}
                                    ~'$\n?'
                                  ;

main : ( variable
       | rule
       | global-parameters
       )*
     ;

CLAUSE = '[A-Z\d_]+'
IDENTIFIER = '[[:alnum:]_\-\.]+'

variable : ( '(?:EXTENSIONS|FIRST_LINE|HIDDEN|NAME|SCOPE(?:_POSTFIX)?)\b'{storage.type}
             | IDENTIFIER{entity.name.variable}
           )
           `=`{keyword.operator.assignment}
           ( terminal
           | IDENTIFIER{variable.function} parameters?
           )
         ;

terminal: literal | regex;

rule : IDENTIFIER{entity.name.function}
       parameters?
       options?
       `:`{keyword.operator.assignment}
       pattern
       `;`{punctuation.terminator.rule}
     ;

pattern : pattern-element (`|`{keyword.operator}? pattern)? ;

pattern-element : '~|!'{keyword.operator}?
                  pattern-item
                  '\*|\?'{keyword.control}?
                ;

pattern-item : terminal options? embed-include?
             | group
             | IDENTIFIER{variable.function} parameters? options?
             ;

group{meta.group} : `(`{punctuation.section.group.begin}
                    pattern
                    `)`{punctuation.section.group.end}
                  ;

literal{string.quoted.other, include-prototype: false}
: '`'{punctuation.definition.string.begin}
  ~'`'{punctuation.definition.string.end}
;

regex{string.quoted.single, include-prototype: false}
: `'`{punctuation.definition.string.begin}
  %include[regex-prototype]{scope:source.regexp}
  `'`{punctuation.definition.string.end}
;

regex-prototype{include-prototype: false}
: ( ~( `\'`{constant.character.escape}
     | interpolation
     )
  )*
  ~'(?=\')'
;

options{include-prototype: false}
: `{`{punctuation.section.options.begin}
  ( ~interpolation )*
  ~`}`{punctuation.section.options.end}
;

embed-include
: `%`
  'embed|include'{keyword}
  parameters
  options
;

interpolation{include-prototype: false}
: `#[`{punctuation.definition.placeholder.begin}
  parameter
  `]`{punctuation.definition.placeholder.end}
;

parameters
: `[`{punctuation.section.parameters.begin}
  parameter ( `,`{punctuation.separator.parameters} parameter )*
  `]`{punctuation.section.parameters.end}
;

global-parameters{meta.function.parameters}:
  `[`{punctuation.section.parameters.begin}
  CLAUSE{variable.parameter}
  ( `,`{punctuation.separator.parameters} CLAUSE{variable.parameter} )*
  `]`{punctuation.section.parameters.end}
  ;

parameter{variable.parameter} : terminal | IDENTIFIER ;
