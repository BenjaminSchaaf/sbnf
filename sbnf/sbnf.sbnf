EXTENSIONS = 'sbnf'

prototype : ( ~comment )* ;

comment{comment.line.number-sign} : '#+'{punctuation.definition.comment}
                                    ~'$\n?'
                                  ;

main : ( clause
       | rule
       | global-parameters
       )*
     ;

CLAUSE = '[A-Z\d_]+'
RULE = '[a-z\d\-]+'

clause : ( '(?:EXTENSIONS|FIRST_LINE|HIDDEN|NAME|SCOPE(?:_POSTFIX)?)\b'{storage.type}
             | CLAUSE{entity.name.variable}
           )
           parameters?
           `=`{keyword.operator.assignment}
           ( terminal
           | (( CLAUSE{constant.other} | RULE{meta.function-call variable.function})
              arguments? )
           )
       ;

terminal: literal | regex;

rule : RULE{meta.function entity.name.function}
       parameters?
       rule-options?
       `:`{keyword.operator.assignment}
       pattern
       `;`{punctuation.terminator.rule}
     ;

pattern : pattern-element (`|`{keyword.operator}? pattern)? ;

pattern-element : '~|!'{keyword.operator}?
                  pattern-item
                  '\*|\?'{keyword.control}?
                ;

pattern-item : terminal terminal-options? embed-include?
             | group
             | CLAUSE{constant.other} arguments? terminal-options?
             | RULE{variable.function} arguments?
             ;

group{meta.group} : `(`{punctuation.section.group.begin}
                    pattern
                    `)`{punctuation.section.group.end}
                  ;

literal{string.quoted.other, include-prototype: false}
: '`'{punctuation.definition.string.begin}
  ~'`'{punctuation.definition.string.end}
;

regex{string.quoted.single, include-prototype: false}
: `'`{punctuation.definition.string.begin}
  %include[regex-prototype]{scope:source.regexp}
  `'`{punctuation.definition.string.end}
;

regex-prototype{include-prototype: false}
: ( ~( `\'`{constant.character.escape}
     | interpolation
     )
  )*
  ~'(?=\')'
;

options{include-prototype: false}
: `{`{punctuation.section.options.begin}
  ( ~interpolation )*
  ~`}`{punctuation.section.options.end}
;

rule-options{include-prototype: false}:
  `{`{punctuation.section.options.begin}
  (include-prototype
  | scope (`,`{punctuation.separator.options} include-prototype)?
  )?
  `}`{punctuation.section.options.end}
;

include-prototype{include-prototype: false}:
  `include-prototype`{keyword.control.flow}
  `:`{punctuation.separator.options}
  ('true|false'{constant.language}
   | '(?=[^\s,:.}])' (~interpolation)* ~'(?=[\s,:.}])')
;

terminal-options{include-prototype: false}:
  `{`{punctuation.section.options.begin}
  (captures | scope (`,`{punctuation.separator.options} captures)?)?
  `}`{punctuation.section.options.end}
;

captures{include-prototype: false}:
  '\d+'{constant.numeric.integer}
  `:`{punctuation.separator.key-value}
  scope
  (`,`{punctuation.separator.options} captures)?
;

scope{include-prototype: false}:
  '(?=[^\s,:.}])'
  (~( interpolation | `.`{punctuation.separator.scope-segments} ))*
  ~'(?=\s*[,:.}])'
;

include-scope{include-prototype: false}:
  '(?:scope(:))?(?=[^\s,:.}])'{
    0: support.type.include,
    1: punctuation.definition.scope-include
  }
  ( ~(interpolation | `.`{punctuation.separator.scope-segments}) )*
  ~'(?=[\s,:}])'
;

embed-include: `%`{keyword.control} ( embed | include ) ;

embed:
  `embed`{keyword.control}
  `[`{punctuation.section.arguments.begin}
  terminal
  `]`{punctuation.section.arguments.end}
  `{`{punctuation.definition.options.begin}
  include-scope
  (`,`{punctuation.separator.options}
    ( captures
    | scope (`,`{punctuation.separator.options} captures )?
    )
  )?
  `}`{punctuation.definition.options.end}
;

include:
  `include`{keyword.control}
  `[`{punctuation.section.arguments.begin}
  (CLAUSE{constant.other} | RULE)
  `]`{punctuation.section.arguments.end}
  `{`{punctuation.definition.options.begin}
  include-scope
  `}`{punctuation.definition.options.end}
;

interpolation{include-prototype: false}
: `#[`{punctuation.definition.placeholder.begin}
  '#[CLAUSE]|#[RULE]'{variable.other.placeholder}
  `]`{punctuation.definition.placeholder.end}
;

parameters
: `[`{punctuation.section.parameters.begin}
  parameter ( `,`{punctuation.separator.parameters} parameter )*
  `]`{punctuation.section.parameters.end}
;

global-parameters{meta.function.parameters}:
  `[`{punctuation.section.parameters.begin}
  CLAUSE{variable.parameter}
  ( `,`{punctuation.separator.parameters} CLAUSE{variable.parameter} )*
  `]`{punctuation.section.parameters.end}
  ;

parameter{variable.parameter} : terminal | CLAUSE | RULE;

arguments{meta.function-call}
: `[`{punctuation.section.arguments.begin}
  argument ( `,`{punctuation.separator.arguments} argument )*
  `]`{punctuation.section.arguments.end}
;

argument: terminal | CLAUSE{constant.other} | RULE;
