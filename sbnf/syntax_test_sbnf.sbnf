# SYNTAX TEST "Packages/sbnf/sbnf.sublime-syntax"

 [PARAM1, PARAM2]
#^^^^^^^^^^^^^^^^ meta.function.parameters.sbnf
#^ punctuation.section.parameters.begin.sbnf
# ^^^^^^ variable.parameter.sbnf
#       ^^^^^^^^ meta.function.parameters.sbnf
#       ^ punctuation.separator.parameters.sbnf
#         ^^^^^^ variable.parameter.sbnf
#               ^ punctuation.section.parameters.end.sbnf

 [param1]
#^ meta.function.parameters.sbnf punctuation.section.parameters.begin.sbnf
# ^ invalid.illegal.sbnf
#  ^^^^^ entity.name.function.sbnf
#       ^ invalid.illegal.sbnf

 HEADER = `value`
#^^^^^^ entity.name.variable.sbnf
#       ^ keyword.operator.assignment.sbnf
#         ^^^^^^^ string.quoted.other.sbnf
#         ^ punctuation.definition.string.begin.sbnf
#               ^ punctuation.definition.string.end.sbnf

 EXTENSIONS = `ext`
#^^^^^^^^^^ storage.type.sbnf
#           ^ keyword.operator.assignment.sbnf
#             ^^^^^ string.quoted.other.sbnf
#             ^ punctuation.definition.string.begin.sbnf
#                 ^ punctuation.definition.string.end.sbnf

 SCOPES =
#^^^^^^ entity.name.variable.sbnf
#       ^ keyword.operator.assignment.sbnf
 'source.*'
#^^^^^^^^^^ string.quoted.single.sbnf
#^ punctuation.definition.string.begin.sbnf
# ^^^^^^^^ source.regexp meta.mode.basic.regexp
#       ^ keyword.other.any.regexp
#        ^ keyword.operator.quantifier.regexp
#         ^ punctuation.definition.string.end.sbnf

 rule[A, `b`]{some.scope, include-prototype: false}: '(#[A]), b'{1: some.other.scope};
#^^^^ meta.function.sbnf entity.name.function.sbnf
#    ^ punctuation.section.parameters.begin.sbnf
#     ^ variable.parameter.sbnf
#      ^ punctuation.separator.parameters.sbnf
#       ^^^^ variable.parameter.sbnf
#        ^^^ string.quoted.other.sbnf
#           ^ punctuation.section.parameters.end.sbnf
#            ^ punctuation.section.options.begin.sbnf
#                 ^ punctuation.separator.scope-segments.sbnf
#                       ^ punctuation.separator.options.sbnf
#                         ^^^^^^^^^^^^^^^^^ keyword.control.flow.sbnf
#                                          ^ punctuation.separator.options.sbnf
#                                            ^^^^^ constant.language.sbnf
#                                                 ^ punctuation.section.options.end.sbnf
#                                                  ^ keyword.operator.assignment.sbnf
#                                                    ^^^^^^^^^^^ string.quoted.single.sbnf
#                                                      ^^ punctuation.definition.placeholder.begin.sbnf
#                                                        ^ variable.other.placeholder.sbnf
#                                                         ^ punctuation.definition.placeholder.end.sbnf
#                                                               ^ punctuation.section.options.begin.sbnf
#                                                                ^ constant.numeric.integer.sbnf
#                                                                 ^ punctuation.separator.key-value.sbnf
#                                                                       ^ punctuation.separator.scope-segments.sbnf
#                                                                                   ^ punctuation.section.options.end.sbnf
#                                                                                    ^ punctuation.terminator.rule.sbnf

 CLAUSE[a, B] = foo[a, B, `c`, 'd']
#^^^^^^ entity.name.variable.sbnf
#      ^ punctuation.section.parameters.begin.sbnf
#       ^ variable.parameter.sbnf
#        ^ punctuation.separator.parameters.sbnf
#         ^^ variable.parameter.sbnf
#           ^ punctuation.section.parameters.end.sbnf
#             ^ keyword.operator.assignment.sbnf
#               ^^^ meta.function-call.sbnf variable.function.sbnf
#                  ^ meta.function-call.sbnf punctuation.section.arguments.begin.sbnf
#                  ^^^^^^^^^^^^^^^^ meta.function-call.sbnf
#                      ^ meta.function-call.sbnf constant.other.sbnf

 rule = 'jdf'
#^^^^ meta.function.sbnf entity.name.function.sbnf
#     ^ invalid.illegal.sbnf
#       ^ invalid.illegal.sbnf
#           ^ invalid.illegal.sbnf

 UPPER : '[A-Z]+'
#^^^^ entity.name.variable.sbnf
#      ^ invalid.illegal.sbnf
#        ^ invalid.illegal.sbnf

 INV{some.scope} = ''
#^^^ entity.name.variable.sbnf
#   ^ invalid.illegal.sbnf
#        ^ invalid.illegal.sbnf
#              ^ invalid.illegal.sbnf
#                ^ invalid.illegal.sbnf

 script
#^^^^^^ entity.name.function.sbnf
: '<script>'{tag.begin.script}
# ^^^^^^^^^^ string.quoted.single.sbnf
#           ^ punctuation.section.options.begin.sbnf
#                            ^ punctuation.section.options.end.sbnf
  %embed['</script>']{scope:source.js, embedded.js, 0: tag.end.script}
# ^^^^^^ keyword.control.sbnf
#                                    ^ punctuation.separator.options
#                                                   ^ constant.numeric.integer.sbnf
#                                                    ^ punctuation.separator.key-value.sbnf
;

regex-string{string.quoted}
: `'`{punctuation.definition.string.begin}
  %include[regex-prototype]{scope:source.regexp}
# ^^^^^^^^ keyword.control.sbnf
#         ^ punctuation.section.arguments.begin.sbnf
#                         ^ punctuation.section.arguments.end.sbnf
#                          ^ punctuation.definition.options.begin.sbnf
#                           ^^^^^^ support.type.include.sbnf
#                                ^ punctuation.definition.scope-include.sbnf
#                                       ^ punctuation.separator.scope-segments.sbnf
#                                              ^ punctuation.definition.options.end.sbnf
  `'`{punctuation.definition.string.end}
;