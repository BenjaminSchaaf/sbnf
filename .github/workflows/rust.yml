name: Rust

on: [push, pull_request]

env:
  RUSTFLAGS: "-Dwarnings"
  CARGO_TERM_COLOR: always

jobs:
  build:
    if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: Swatinem/rust-cache@v1
    - name: Check Formatting
      run: cargo fmt --all -- --check
    - name: Run Clippy
      run: cargo clippy --workspace --all-targets --all-features
    - name: Build SBNF
      run: cargo build --verbose -p sbnf
    - name: Test SBNF
      run: cargo test --verbose -p sbnf
    - name: Build CLI
      run: cargo build --verbose -p sbnfc

  deploy-executables:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.OS }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
            OS: ubuntu-latest
          - TARGET: aarch64-unknown-linux-gnu
            OS: ubuntu-latest
          - TARGET: x86_64-apple-darwin
            OS: macos-latest
          - TARGET: x86_64-pc-windows-msvc
            OS: windows-latest

    env:
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Install and configure dependencies
        shell: bash
        run: |
          set -e -v -x

          if [[ $ubuntu-latest ]]; then
            if [[ $TARGET == aarch64-unknown-linux-gnu ]]; then
              sudo apt-get install -qq crossbuild-essential-arm64
            fi

            # Some additional configuration for cross-compilation on linux
            cat >>~/.cargo/config <<EOF
            [target.aarch64-unknown-linux-gnu]
            linker = "aarch64-linux-gnu-gcc"
          EOF
          fi
      - name: Install rust target
        shell: bash
        run: rustup target add $TARGET
      - name: Run build
        shell: bash
        run: cargo build --release --verbose --target $TARGET
      - name: Compress
        shell: bash
        run: |
          set -e -v -x

          mkdir artifacts out

          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=sbnf.exe
          else
              EXEC=sbnf
          fi

          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi

          mv ./target/$TARGET/release/$EXEC ./out/$EXEC
          tar -cJf ./artifacts/sbnf-compiler-$TARGET-$TAG.tar.xz -C ./out $EXEC
      - name: Archive artifact
        uses: softprops/action-gh-release@v1
        with:
          files: './artifacts/*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
